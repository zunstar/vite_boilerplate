---
description: "Frontend Exception Handling 규칙 (React 기반)"
globs: ["**/*.{js,jsx,ts,tsx}"]
alwaysApply: true
---
/*
# [프론트엔드 예외 처리 규칙]

- 모든 API 요청은 try-catch 블록으로 감싸고, 오류 시 사용자에게 적절한 메시지를 보여줘야 한다.
- HTTP 응답 상태 코드에 따라 분기 처리하며, 공통 에러 핸들러를 통해 일관성 있게 처리한다.
- 사용자에게 노출되는 에러 메시지는 '행동 유도형' 한글 메시지로 제공한다. (예: "다시 시도해 주세요.")
- 민감한 정보 (stack trace, 내부 API URL 등)는 UI나 콘솔에 노출하지 않는다.
- 전역 에러 핸들러 (`ErrorBoundary`, `window.onerror`, `unhandledrejection`)를 반드시 구현한다.
- 네트워크 장애나 백엔드 장애는 사용자 관점에서 분리해서 대응해야 한다.
- 예상 가능한 예외는 코드 상에서 조건문으로 처리하고, 예외로 처리하지 않는다.
- 반복적인 예외 핸들링 코드는 hooks나 유틸 함수로 추상화하여 재사용한다.
*/

# Frontend Exception Handling Rules (React)

- Wrap **all API requests** with try-catch blocks; show proper UI messages on failure.
- Handle errors by **HTTP status code** (e.g., 401 → login, 403 → 권한 없음, 500 → 서버 오류 안내).
- **User-facing error messages** should be written in Korean and encourage action.
  - Good: `"네트워크 연결이 원활하지 않아요. 잠시 후 다시 시도해 주세요."`
  - Bad: `"ECONNRESET: failed to fetch"`
- Never expose stack traces, sensitive internal logs or debug info to users.
- Implement **global error handlers**:
  - `ErrorBoundary` for React component-level errors
  - `window.onerror` and `unhandledrejection` for runtime & async errors
- Provide **fallback UI** (e.g., Error page, Reload button) when serious errors occur.
- Expected edge cases (e.g., empty list, unauthorized state) should be handled without exceptions.
- Extract common logic to `useErrorHandler`, `useApi`, or `handleApiError.ts` for DRY principles.

# 예시 코드 1: Axios 공통 핸들러

```ts
// src/utils/handleApiError.ts
export function handleApiError(error: unknown): string {
  if (axios.isAxiosError(error)) {
    const status = error.response?.status;
    switch (status) {
      case 400: return '요청이 잘못되었습니다.';
      case 401: return '로그인이 필요합니다.';
      case 403: return '접근 권한이 없습니다.';
      case 404: return '요청하신 정보를 찾을 수 없습니다.';
      case 500: return '서버 오류가 발생했어요. 잠시 후 다시 시도해 주세요.';
      default: return '알 수 없는 오류가 발생했어요.';
    }
  }
  return '예기치 않은 오류가 발생했어요.';
}