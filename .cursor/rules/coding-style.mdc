---
description: "Base Coding Style"
globs: ["**/*"]
alwaysApply: true
---

# 코딩 스타일 규칙

/*
- 들여쓰기: 각 레벨 당 **탭 2개** 사용 (스페이스 사용 금지)
- JavaScript/TypeScript 문법: **ES6 이상 최신 문법** 사용 (let/const, 화살표 함수, 구조 분해 등)
- 세미콜론: 모든 문장 끝에 **세미콜론 필수**
- 가능하면 문자열은 **싱글 쿼트(')** 사용
- 재할당이 필요한 경우를 제외하고는 `const` 사용 권장
- 익명 함수는 화살표 함수 사용 선호
- `import` / `export` ES 모듈 문법 사용, CommonJS `require` 사용 지양
- 후행 콤마(트레일링 콤마) 사용 금지
- 내보내는 함수 및 클래스에는 항상 JSDoc 주석 작성
- JSX에서 속성이 2개 이상일 경우 줄바꿈 및 정렬 필수
- 조건부 렌더링에서 명확한 삼항 연산자 또는 함수 분리 권장
- 불필요한 fragment (`<>...</>`) 사용 금지
- ESLint/Prettier 적용을 통해 자동화된 스타일 적용 권장

# 기타
- 모든 AI 생성 코드 및 리뷰는 반드시 위 스타일을 준수하여 작성할 것
*/

# Coding Style Rules

- Indentation: Use **2 tabs** per indent level (spaces not allowed)
- JavaScript/TypeScript syntax: Use **ES6+ syntax** (let/const, arrow functions, destructuring, etc.)
- Semicolons: **Required** at the end of every statement
- Strings: Prefer single quotes (`'`) over double quotes
- Use `const` by default, use `let` only when reassignment is needed
- Prefer arrow functions for anonymous functions
- Use ES module syntax (`import`/`export`), avoid CommonJS (`require`)
- No trailing commas
- Exported functions and classes **must include JSDoc comments**
- In JSX: multiline props must be line-broken and aligned
- Conditional rendering: use clear ternary or separate logic in functions
- Do not use unnecessary fragments (`<>...</>`)
- Use ESLint + Prettier for automated formatting enforcement

# Additional Notes

- All AI-generated code and code reviews **must follow** the rules above
- Set up `.eslintrc`, `.prettierrc`, `tsconfig.json` accordingly to enforce this style
- Use `husky` + `lint-staged` to prevent commits with incorrect styles